<?php
namespace app\api\common;

use think\Controller;
use think\Db;
use think\Request;
use think\Session;
use app\api\model\TUser;
use app\api\model\TUserToken;
use app\api\model\VUsercode;
use app\api\model\TUsercode;
use Qcloud\Sms\SmsSingleSender;
use app\api\model\VSysUserRoleGroup;
use app\api\model\TSysUserRoleGroup;
//use My\RedisPackage;
use think\Cache;

class Base extends Controller {

    public function _initialize() {
        parent::_initialize();   
        $URL=request()->domain();
        define("URL", $URL);
        $params=request()->param();
        if (isset($params['test'])) {
            //接口测试
        }else{
            // 1.验证签名
            self::checkSign($params);
            //2.验证access_token
            self::access_token($params);
            //3.验证接口是否可用
            self::access_api($params);
            //4.发现新版本
            self::Version();
        }
        self::Version();
        // 切换到redis操作
        //$redis=new Redis;
        //var_dump($redis);die;
        //获取缓存
        //$this->getRedisValue();
    }
 
    /**
     * @return string|void
     * 1.签名验证
     */
    public function CheckSign($param){
        // $param=array_filter($param);
        $clientSign=isset($param['sign'])?$param['sign']:null;
        $app_key=isset($param['key'])?$param['key']:null;
        $time=isset($param['time'])?$param['time']:null;
        $app_secret = Db::table('app_info')
                ->where(['app_key'=>$app_key,'record_status'=>1])
                ->value('app_secret');
        //传值验证
        if(empty($clientSign)){
            $data = [
                'code'=>'420',
                'msg'=>'请求失败！sign丢失'
            ];
        }elseif(empty($app_secret) || !isset($time)){
            $data = [
                'code'=>'421',
                'msg'=>'请求失败！无效访问'
            ];
        }elseif(isset($time) && strtotime('+6000 second',$time)<strtotime("now")){
            // var_dump(strtotime('+6000 second',$param['time']));
            // var_dump(strtotime("now"));
            // var_dump(strtotime('+6000 second',$param['time'])<strtotime("now"));die;
            $data = [
                'code'=>'422',
                'msg'=>'请求失效！接口失效'
            ];
        }else{
            //真正签名
            $reserverstr="key$app_key"."time$time".$app_secret;
            $reserverSign = strtoupper(md5($reserverstr));
            if($clientSign!=$reserverSign){
                $data = [
                    'code'=>'423',
                    'msg'=>'请求失败！签名错误'
                ];
            }else{
                $data = [
                    'code'=>'200',
                    'msg'=>'请求成功'
                ];
            }
        }
        return  json_encode($data); 
    }

    /**
     * @return string|void
     * 2.验证access_token
     */
    public function access_token($params){
        if (isset($params['devicetype'])) {
                # web跳过token验证  App-Login里的很多方法都不需要登录，所以绕开token检测
                $type = get_class($this);
                if ($params['devicetype'] != 'web' && $type != 'app\api\controller\Login') {
                    $user_id =isset($params['uid']) ? $params['uid'] : 0;
                    $access_token =isset($params['token']) ? $params['token'] : 0;
                    if (!$this->checkToken($user_id,$access_token)) {
                        $data = [
                            'code'=>'420',
                            'msg'=>'请求失败！请重新登录'
                        ];
                        echo json_encode($data);exit;
                    }
                }
        }else{
            $data=[
                'code' => '430',
                'msg' => 'devicetype丢失'
            ];
            echo json_encode($data);exit;
        }
    }

    /**
     * @return string|void
     * 3.验证接口是否可用
     */
    public function access_api($params){
        $app_key = isset($params['key'])?$params['key']:'';
        $app_info = Db::table('app_info')->where(['app_key'=>$app_key,'record_status'=>1])->find();
        $app_id = isset($app_info['fid']) ? $app_info['fid'] : 0;
        $version_id = $app_info['version_id'];
        $route = request()->path();
        $app_acl_info = Db::query("select * from app_acl_info where app_id=$app_id and record_status=1 and UNIX_TIMESTAMP(expire_time)>UNIX_TIMESTAMP(NOW())");
        if (empty($app_acl_info)) {
            $data=[
                'code' => '412',
                'msg' => '无权访问'
            ];
            echo json_encode($data);exit;
        }else{
            $flag = false;
            foreach ($app_acl_info as $vo) {
                if ($vo['function']=='%' || $vo['function']==$route) {
                    $flag = true;
                    break;
                }
            }
            if (!$flag) {
                $data=[
                    'code' => '412',
                    'msg' => '无权访问'
                ];
                echo json_encode($data);exit;
            }
        }
    }
    
    /**
     * @return string|void
     * 4.发现新版本
     */
    public function Version(){
        $params = request()->param();
        $uid =isset($params['uid'])?$params['uid']:0;
        $devicetype =isset($params['devicetype'])?$params['devicetype']:'';
        //版本号
        $version_no = isset($params['appVersion']) ? $params['appVersion'] : 0;

        $app_type = 0;
        if ($devicetype == 'andriod'){
            $app_type = 1;
        }else if ($devicetype == 'ios'){
            $app_type = 2;
        }else if ($devicetype == 'web'){
            $app_type = 3;
        }
        //所有版本中的最新版本
        $version_list =Db::table("v_version_info")
        ->where(['record_Status'=>1,'app_postfix'=>$app_type])
        ->order('version_no desc')->limit(0,1)->select();
        
        $data = [
            'code'=>'9999',
            'msg' => '发现新版本',
            'data' => count($version_list)>0 ? $version_list[0] : []
        ];
        //用户版本信息
        $where = ['record_Status'=>1,'version_no'=>$version_no,'app_postfix'=>$app_type];
        $where['org_id'] = 0;
        $where['user_id'] = 0;
        $version_all =Db::table("v_version_dl_info")->where($where)->find();
        if (count($version_list)>0 && $version_list[0]['version_no']==$version_all['version_no']){
            //已经是最新版本  不操作
            return;
        }

        //升级控制，1：登录后不提醒，用户可以在配置管理中自行升级2：登录后提醒用户升级，不强制3：登陆后强制用户升级
        //所有用户都可以升级
        if (!empty($version_all) && $version_all['force_type']==3){
            echo json_encode($data);exit;
        }


        unset($where['org_id']);//删除org_id条件
        unset($where['user_id']);//删除user_id条件
        //指定单位升级
        $user = Db::table('enduser_info')->where(['fid'=>$uid,'record_status'=>1])->find();

        if (!empty($user) && $user['org_id']>0 ){
            $org_id = $user['org_id'];
            $where['org_id'] = $org_id;
            $version_org =Db::table("v_version_dl_info")->where($where)->find();
            if (!empty($version_org)){
                if ($version_org['force_type']==3){
                    //升级控制，1：登录后不提醒，用户可以在配置管理中自行升级2：登录后提醒用户升级，不强制3：登陆后强制用户升级
                    echo json_encode($data);exit;
                }
            }
        }

        unset($where['org_id']);//删除org_id条件

        //指定人员升级
        if (!empty($user) && $user['org_id']>0 ){
            $where['user_id'] = $uid;
            $version_user =Db::table("v_version_dl_info")->where($where)->find();
            if (!empty($version_user)){
                if ($version_user['force_type']==3){
                    //升级控制，1：登录后不提醒，用户可以在配置管理中自行升级2：登录后提醒用户升级，不强制3：登陆后强制用户升级
                    echo json_encode($data);exit;
                }
            }
        }
        //未查到信息 不做处理
            
    }

    //==========方法===========
    //生成接口RedisKey
    public function getRedisKey(){
        $requestParams=request()->param();
        unset($requestParams['sign']);
        unset($requestParams['time']);
        $str = "";
        foreach ($requestParams as $key => $value) {
            $str .= json_encode($key).json_encode($value);
        }
        $str = md5($str);
        return $str;
    }
    //设置缓存
    public function setRedisValue($data,$exprie=0){
        // $redis = new RedisPackage();
        // $redisKey = $this->getRedisKey();
        // $redis::set($redisKey,$data,$exprie);
    }
    //获取缓存
    public function getRedisValue(){
        $redis = new RedisPackage();
        $redisKey = $this->getRedisKey();
        $redisValue = $redis::get($redisKey);
        if (!empty($redisValue)) {
            echo $redisValue;exit;
        }
    }
    //检验token
    public function checkToken($user_id,$token){
        $user_token = Db::table('app_token_info')->where(['user_id'=>$user_id,'access_token'=>$token,'record_status'=>1])->find();
        if (empty($user_token)) {
            return false;
        }
        $expire_time = $user_token['expire_time'];
        $expiration = $user_token['expiration'];
        if (strtotime($expire_time) < strtotime('now')) {
            return false;
        }
        return true;
    }

    /**
     * 获取所有 以 HTTP开头的header参数
     * @return array
     */
    public function getAllHeaders(){
        $headers = array();
        foreach($_SERVER as $key=>$value){
            var_dump($key);
            if(substr($key, 0, 10)==='HTTP_SIFIC'){
                $key = substr($key, 10);
                $key = str_replace('_', ' ', $key);
                $key = str_replace(' ', '-', $key);
                $key = strtolower($key);
                $headers[$key] = $value;
            }
        }
        exit;
        return $headers;
    }

    /**
    *判断用户是否登录 在后台入口调用
    */
    public  function Is_Login(){
      //如果登录常量为空，表示没有登录
      if(is_null(FID)){
        $this->redirect("/login");
      }
    }

    /**
    *判断用户如果已经登录  不允许再次登录
    */
    public  function web_Login() {
      //如果登录常量为空，表示没有登录
      if(!is_null(FID) && $_POST['FTel']==FTel){
        $this->error("请不要重复登录~~","/");
      }
    }

}